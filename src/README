FHW source files


Bash script for invoking GHC, fhw, etc.

    fhw

Compiler top-level

    Fhw.hs

Intermediate representation; adapted from External Core

    Core/Core.hs		

Parser for the External Core format generated from GHC; used to read
.hcr files into 

    CoreParser/Lex.hs	
    CoreParser/Encoding.hs
    CoreParser/Parser.y
    CoreParser/ParseGlue.hs

Links in External Core (standard) libraries to make Core
representation self-contained.  Does basic dead function elimination.
Used during normal compilation.
 
    Linker/Linker.hs

Dump Core in the form of an executable Haskell program.  Used for compiler
debugging.

    Haskgen/DeadCode.hs
    Haskgen/Haskgen.hs

Finds case statements on heap types; add read and write operations (on Core)

    Pass/TagMemoryOps/TagMemoryOps.hs

Lizzie's:

    Pass/Defunctionalization/Defunctionalization.hs
    Pass/Defunctionalization/LambdaLift.hs

Fills in undefined types generated by various passes; used a lot

    Pass/AnnoteTypes/Environment.hs
    Pass/AnnoteTypes/AnnotateTypes.hs

Add "go" signals to constants, etc.

    Pass/AddGo/AddGo.hs

Transformation into Dataflow

    Pass/Dataflow/Preprocess.hs	Run before translation to rewrite certain things
    Pass/Dataflow/Translate.hs	Syntax-directed translation
    Pass/Dataflow/NodeTypes.hs	Dataflow network "AST"

Deprecated (?):

    Pass/Dataflow/Heuristic.hs		Buffering-related (reconvergent path)
    Pass/Dataflow/TicGen.hs			Simulator
    Pass/Dataflow/Simulator.hs		Simulator
    Pass/Dataflow/NodeLib.hs		Simulator
    Pass/Dataflow/BaseLine.hs		Simulator (unbounded networks)

Eliminate polymorphism by inlining/specializing types:

    Pass/Monomorphise/Monomorphise.hs

Preprocessing pass for removing recursion:

    Pass/LiftRecursive/LiftRecursive.hs

Turning recursion into tail recursion:

    Pass/RemoveRecursion/Restruct.hs
    Pass/RemoveRecursion/CombineMutual.hs
    Pass/RemoveRecursion/Linearize.hs
    Pass/RemoveRecursion/RemoveRecursion.hs
    Pass/RemoveRecursion/Inline.hs
    Pass/RemoveRecursion/Utils.hs

Rewrite literal patterns into a cascade of conditionals

    Pass/RemoveLitPat/RemoveLitPat.hs

Lizzie:

    Pass/LiftExpressions/LiftExpressions.hs

    Pass/MemoryInsert/MemoryInsert.hs

Make names globally unique

    Pass/UniquifyNames/UniquifyNames.hs

Not used for the moment, but will be revitalized:

    Pass/PackTypes/Generated.hs
    Pass/PackTypes/PackTypes.hs
    Pass/PackTypes/Environment.hs
    Pass/PackTypes/Unify.hs
    Pass/PackTypes/Transformation.hs

Probably deprecated.  For old stream generation?  Still used. (Stephen)

    Pass/LiftConstants/LiftConstants.

Convert into sylized core for SysVerGen. Deprecated.

    Pass/Streamify/Streamify.hs

Generate System Verilog directly from a highly stylized core module
written to operate on streams.  Deprecated.

    SysVerGen/SysVerGen.hs
    SysVerGen/SystemVerilog.hs
    SysVerGen/AlgebraicTypes.hs
    SysVerGen/test-sv.hskimkim

------------------------------
Test suite directories

tests_EndToEnd		Haskell to Dataflow/System Verilog

tests_Dataflow		Runs dataflow simulation (CC paper) Pre-DF (.hcr)
			Try running HaskGen on them?

tests_AddGo		Transforming constants into functions with go (Haskgen)
tests_Basic		Checking Core generation
tests_Defunctionalization (Lizzie?)
tests_HaskGen		For testing HaskGen: generate Haskell from Core
tests_LiftExpressions	(Lizzie)
tests_LiftRecursive	For testing the LiftRecursive pass
tests_Monomorphise	(run through Haskgen; verify)
tests_Packing		(not currently used)
tests_Parser		Simple testing for the External Core parser
tests_RemoveRecursion	(run through Haskgen; verify)
tests_SimplifiedCore	For testing the simplified core output mode
tests_Streamify		Deprecated; left over from Streamify pass
tests_TagMemoryOps	Basic tests

disabled_Dfc
disabled_DfcVerilog
disabled_SysVerGen


Richard's memory simulator

Takes a buffered dataflow network as input

dfc/testsuite/memory_simulator/runtests.sh  
compile_verilator.sh